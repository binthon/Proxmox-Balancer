trigger: none

resources:
  pipelines:
    - pipeline: tfvarsGenerator         
      source: tfvarsGenerator        
      trigger:
        branches:
          - main

pool:
  name: "Win"
  demands:
    - Agent.Name -equals win

parameters:
  - name: artifactName
    type: string
    default: tfvars
  - name: fileName
    type: string
    default: terraform.tfvars.json

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: ${{ parameters.artifactName }}
    path: '$(Pipeline.Workspace)/tfvars'

- task: PowerShell@2
  name: CheckTfvars
  displayName: "Sprawd≈∫ czy tfvars istnieje"
  inputs:
      targetType: 'inline'
      script: |
        $fileName = "${{ parameters.fileName }}"
        $filePath = "$(Pipeline.Workspace)\tfvars\$fileName"
  
        if (Test-Path $filePath) {
          Write-Host "Znaleziono plik tfvars.json"
          Write-Host "##vso[task.setvariable variable=shouldRunTerraform]true"
        } else {
          Write-Host "Nie znaleziono pliku tfvars.json"
          Write-Host "##vso[task.setvariable variable=shouldRunTerraform]false"
        }

- script: terraform init
  workingDirectory: infra/
  condition: eq(variables['shouldRunTerraform'], 'true')
  displayName: "Terraform Init"

- script: terraform plan -var-file="$(Pipeline.Workspace)/tfvars/${{ parameters.fileName }}"
  workingDirectory: infra/
  condition: eq(variables['shouldRunTerraform'], 'true')
  displayName: "Terraform Plan"

- script: terraform apply -auto-approve -var-file="$(Pipeline.Workspace)/tfvars/${{ parameters.fileName }}"
  workingDirectory: infra/
  condition: eq(variables['shouldRunTerraform'], 'true')
  displayName: "Terraform Apply"
