trigger: none

resources:
  pipelines:
    - pipeline: tfvarsGenerator         
      source: tfvars.generate         
      trigger:
        branches:
          - main

pool:
  name: "Win"
  demands:
    - Agent.Name -equals win

variables:
  ARM_CLIENT_ID: $(ARM_CLIENT_ID)
  ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
  ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  ARM_TENANT_ID: $(ARM_TENANT_ID)

parameters:
  - name: artifactName
    type: string
    default: tfvars_user123
  - name: fileName
    type: string
    default: terraform.tfvars.json

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: ${{ parameters.artifactName }}
    path: '$(Pipeline.Workspace)/tfvars'

- task: Bash@3
  name: CheckTfvars
  inputs:
    targetType: 'inline'
    script: |
      if [ -f "$(Pipeline.Workspace)/tfvars/${{ parameters.fileName }}" ]; then
        echo "##vso[task.setvariable variable=shouldRunTerraform]true"
      else
        echo "##vso[task.setvariable variable=shouldRunTerraform]false"
      fi

- script: terraform init
  workingDirectory: infra/
  condition: eq(variables['shouldRunTerraform'], 'true')
  displayName: "Terraform Init"

- script: terraform plan -var-file="$(Pipeline.Workspace)/tfvars/${{ parameters.fileName }}"
  workingDirectory: infra/
  condition: eq(variables['shouldRunTerraform'], 'true')
  displayName: "Terraform Plan"

- script: terraform apply -auto-approve -var-file="$(Pipeline.Workspace)/tfvars/${{ parameters.fileName }}"
  workingDirectory: infra/
  condition: eq(variables['shouldRunTerraform'], 'true')
  displayName: "Terraform Apply"
